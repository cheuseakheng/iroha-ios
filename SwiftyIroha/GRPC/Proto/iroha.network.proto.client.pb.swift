/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: loader.proto
 *
 */

/*
 * Copyright 2017, gRPC Authors All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import Foundation
import Dispatch
import gRPC
import SwiftProtobuf

/// Type for errors thrown from generated client code.
internal enum Iroha_Network_Proto_LoaderClientError : Error {
  case endOfStream
  case invalidMessageReceived
  case error(c: CallResult)
}

/// retrieveBlocks (Server Streaming)
internal class Iroha_Network_Proto_LoaderretrieveBlocksCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/iroha.network.proto.Loader/retrieveBlocks")
  }

  /// Call this once with the message to send. Nonblocking.
  fileprivate func start(request: Iroha_Network_Proto_BlocksRequest,
                         metadata: Metadata,
                         completion: @escaping (CallResult) -> ())
    throws -> Iroha_Network_Proto_LoaderretrieveBlocksCall {
      let requestData = try request.serializedData()
      try call.start(.serverStreaming,
                     metadata:metadata,
                     message:requestData,
                     completion:completion)
      return self
  }

  /// Call this to wait for a result. Blocking.
  internal func receive() throws -> Iroha_Protocol_Block {
    var returnError : Iroha_Network_Proto_LoaderClientError?
    var returnResponse : Iroha_Protocol_Block!
    let sem = DispatchSemaphore(value: 0)
    do {
      try receive() {response, error in
        returnResponse = response
        returnError = error
        sem.signal()
      }
      _ = sem.wait(timeout: DispatchTime.distantFuture)
    }
    if let returnError = returnError {
      throw returnError
    }
    return returnResponse
  }

  /// Call this to wait for a result. Nonblocking.
  internal func receive(completion:@escaping (Iroha_Protocol_Block?, Iroha_Network_Proto_LoaderClientError?)->()) throws {
    do {
      try call.receiveMessage() {(responseData) in
        if let responseData = responseData {
          if let response = try? Iroha_Protocol_Block(serializedData:responseData) {
            completion(response, nil)
          } else {
            completion(nil, Iroha_Network_Proto_LoaderClientError.invalidMessageReceived)
          }
        } else {
          completion(nil, Iroha_Network_Proto_LoaderClientError.endOfStream)
        }
      }
    }
  }
}

/// retrieveBlock (Unary)
internal class Iroha_Network_Proto_LoaderretrieveBlockCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/iroha.network.proto.Loader/retrieveBlock")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Iroha_Network_Proto_BlockRequest,
                       metadata: Metadata) throws -> Iroha_Protocol_Block {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Iroha_Protocol_Block?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Iroha_Network_Proto_LoaderClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Iroha_Network_Proto_BlockRequest,
                         metadata: Metadata,
                         completion: @escaping (Iroha_Protocol_Block?, CallResult)->())
    throws -> Iroha_Network_Proto_LoaderretrieveBlockCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Iroha_Protocol_Block(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }
}

/// Call methods of this class to make API calls.
internal class Iroha_Network_Proto_LoaderService {
  private var channel: Channel

  /// This metadata will be sent with all requests.
  internal var metadata : Metadata

  /// This property allows the service host name to be overridden.
  /// For example, it can be used to make calls to "localhost:8080"
  /// appear to be to "example.com".
  internal var host : String {
    get {
      return self.channel.host
    }
    set {
      self.channel.host = newValue
    }
  }

  /// Create a client that makes insecure connections.
  internal init(address: String) {
    gRPC.initialize()
    channel = Channel(address:address)
    metadata = Metadata()
  }

  /// Create a client that makes secure connections.
  internal init(address: String, certificates: String?, host: String?) {
    gRPC.initialize()
    channel = Channel(address:address, certificates:certificates, host:host)
    metadata = Metadata()
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func retrieveblocks(_ request: Iroha_Network_Proto_BlocksRequest, completion: @escaping (CallResult)->())
    throws
    -> Iroha_Network_Proto_LoaderretrieveBlocksCall {
      return try Iroha_Network_Proto_LoaderretrieveBlocksCall(channel).start(request:request, metadata:metadata, completion:completion)
  }
  /// Synchronous. Unary.
  internal func retrieveblock(_ request: Iroha_Network_Proto_BlockRequest)
    throws
    -> Iroha_Protocol_Block {
      return try Iroha_Network_Proto_LoaderretrieveBlockCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  internal func retrieveblock(_ request: Iroha_Network_Proto_BlockRequest,
                  completion: @escaping (Iroha_Protocol_Block?, CallResult)->())
    throws
    -> Iroha_Network_Proto_LoaderretrieveBlockCall {
      return try Iroha_Network_Proto_LoaderretrieveBlockCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
}
